#!/usr/bin/env perl

# Require the most recent among the min. version required among all required modules here.
# Use a float - e.g. 5.018002 for v5.18.2 - so that older Perl versions bow out gracefully too.
use 5.007_003;  # min. required for `use Encode`
use utf8; # Indicate that this script itself is UTF8-encoded.
use Encode;

# Locale-aware character encoding:
# Note: We do NOT use open => ':locale', because it can slow output considerably.
#       Instead, we decide case by case whether encoding is needed at all and turn layers on or off selectively.
#       !! The only exception is for Windows output *to the terminal* (the console window), so that foreign chars. render legibly there too.
#       !! Output to files is unaffected.
use if ($^O eq 'MSWin32' and -t 1), open => OUT => ':locale';

# Unix-like platforms: Decode @ARGV in-place from UTF-8 to Perl-internal Unicode strings.
# !! Assumes UTF8-encoding. Sadly, there are no core modules that support determining the locale's actual encoding, but modern Unix-like platforms do use UTF-8.
unless ($^O eq 'MSWin32') { for (@ARGV) { utf8::decode $_ }; }

use strict;
use warnings;

use File::Basename; # for basename()
use File::Spec;     # for File::Spec->devnull()
# For options parsing:
use Getopt::Long qw/:config bundling no_ignore_case no_auto_abbrev gnu_compat permute/;

our $kTHIS_NAME = basename $0;
our $kTHIS_HOMEPAGE='https://github.com/mklement0/rpt';
our $kVERSION = 'v0.0.0'; # This line is automatically updated by `make version VER=<newVer>`
# Convert $kVERSION into a backward-compatible float stored in `our $VERSION`.
our $VERSION = sprintf '%s.%03s%03s', split(/\./, substr $kVERSION, 1);

BEGIN {
  # Debugging support: define p() for printing values diagnostically.
  use Data::Dumper; $Data::Dumper::Terse = 1; $Data::Dumper::Sortkeys = 1; $Data::Dumper::Useperl = 1; sub p { print Dumper(@_); };
  # -- Standard helper functions
  sub mywarn { return if our $quiet; my $msg = $_[0]; chomp $msg; printf STDERR "$kTHIS_NAME: WARNING: %s\n", $msg; } 
  sub mydie { my $msg = $_[0]; chomp $msg; printf STDERR "$kTHIS_NAME: ERROR: %s\n", $msg; exit 1; } 
  sub mydiesyntax { my $msg = defined $_[0] ? $_[0] : ''; chomp $msg; printf STDERR "$kTHIS_NAME: ARGUMENT ERROR: %s\nUse -h for help.\n", $msg ? $msg : 'See above.'; exit 2; }
  # SYNOPSIS
  #   openurl <url>
  # DESCRIPTION
  #   Opens the specified URL in the system's default browser.
  # COMPATIBILITY
  #   OSX, Windows (including MSYS, Git Bash, and Cygwin), Freedesktop-compliant
  #   OSs, which includes many Linux distros (e.g., Ubuntu), PC-BSD, OpenSolaris...
  #   CYGWIN CAVEAT: if a URL contains something that looks like a shell
  #     variable reference to an *existing* variable (e.g., %PATH%), the
  #     value is inadvertently expanded; fortunately, that should rarely
  #     happen in the real world.
  # NOTES
  #   To bypass variations in ad-hoc encoding across platforms, it is safer to
  #   pass an already HTML-encoded URL (where, e.g., spaces are already encoded as '%20').
  #   Gratefully adapted from http://stackoverflow.com/a/8869676/45375.
  sub openurl {
    my $url = shift;
    my $platform = $^O;
    my $cmd;
    if    ($platform eq 'darwin')  { $cmd = "open \"$url\"";       }         # OS X
    elsif ($platform eq 'MSWin32' or $platform eq 'msys') { $cmd = "start \"\" \"$url\""; }     # Windows native or Windows MSYS / Git Bash
      # !! Cygwin: Bizarrely, the only way to get cmd.exe to treat the URL as a 
      # !! literal (almost), is to *append a space*, which, fortunately, is ultimately 
      # !! ignored by browsers. The only edge case where interpretation still happens
      # !! is if the URL contains  syntactically valid reference to an *existing*
      # !! environment variable; e.g., %PATH%.
      # !! The following test URL demonstrates that all other special chars.
      # !! are handled correctly:
      # !!  http://example.org/test?foo^hat%20after%PATH1%&more=stuff(42<46)|@notsofast!
    elsif ($platform eq 'cygwin')  { $cmd = "cmd.exe /c start \"\" \"$url \""; } # Cygwin; !! note the required trailing space
    else { $cmd = "xdg-open \"$url\""; }  # assume a Freedesktop-compliant OS, which includes many Linux distros, PC-BSD, OpenSolaris, ...
    if (system($cmd) != 0) {
      die "Cannot locate or failed to open default browser; please go to '$url' manually.\n";
    }
  }  
}
# Redirect die() and warn() calls to our custom versions, stripping the location information ('... at /foo/bar line 666.')
$SIG{__DIE__} = sub { my $msg = shift; $msg =~ s/ at .+? line .+$//; mydie $msg; };
$SIG{__WARN__} = sub { my $msg = shift; $msg =~ s/ at .+? line .+$//; mywarn $msg; };


# Deal with standard, info-only options.
if (@ARGV) {
  if ($ARGV[0] eq '--version') { 
    print "${kTHIS_NAME} ${kVERSION}\n"; exit 0; 
  }
  elsif ($ARGV[0] eq '--home' and $kTHIS_HOMEPAGE) { openurl $kTHIS_HOMEPAGE; exit $? >> 8; }
  elsif ($ARGV[0] =~ '^(-h|--help)$') { 
    # Extract the contents of the SYNOPSIS chapter from the embedded Markdown-formatted man-page document.
    my $txt = join '', <main::DATA>; close main::DATA;
    $txt = (split /^#/m, (split /^## SYNOPSIS\n/m, $txt)[1])[0];
    $txt =~ tr/`//d;  # remove ` chars.
    print STDOUT $txt, "\n";
    exit 0;
  }
  elsif ($ARGV[0] =~ m'^--(man|man-source)$') {
    my $useembedded = $1 eq 'man-source'; # private option, used by `make update-man`
    my $nullSink = File::Spec->devnull();
    # Try to open the regularly installed man page first.
    if ($useembedded or system("man 1 $kTHIS_NAME 2>$nullSink") != 0) {
      # Fall back to printing the embedded Markdown man-page document.
      # Determine the pager to use. Note that the pager simply passes output
      # through if stdout is not connected to a terminal.
      my $pager = 'more';
      `which less 2>$nullSink`; $pager = 'less' if $? == 0;
      # Extract the Markdown man-page document and pipe it to the pager.
      open (my $outPipe, "| $pager");
      print $outPipe <main::DATA>;
      close main::DATA;
      close $outPipe;
    }
    exit $? >> 8;
  };
}

# -- Script constants
# Default location of the English dictionary on many Unix systems.
my $kDICT_FILE = '/usr/share/dict/words';
# Supported scale multipliers for counts.
my %kSCALE_FACTORS = ( 
  # decimal
  k => 10**3,
  m => 10**6,
  g => 10**9,
  # binary
  ki => 2**10,
  mi => 2**20,
  gi => 2**30  
);
#
# Pseudo count that signals the desire to produce endless (infinite) output (until killed)
my $kCOUNT_ENDLESS = 'x';
# Suffixes that designate a count as being a *character* count:
my $kUNIT_SUFFIX_MAXCHARS = 'c';   # *at most* the number of chars. specified (NO truncation of repeat units)
my $kUNIT_SUFFIX_FIXEDCHARS = 'f'; # *exactly* the number of chars. specified (truncation of last repeat unit, if necessary)
my @kUNIT_SUFFIXES = (
  $kUNIT_SUFFIX_MAXCHARS,  
  $kUNIT_SUFFIX_FIXEDCHARS
);

# -- Parse options.
my ($mode_staticText, $mode_numberedLines, $mode_randomLines, $mode_randomWords, $mode_randomBytes);
my ($sep, $term, $delims);
GetOptions(
  # fundamental modes (in addition to default mode)
  "numbered-lines|n"  => \$mode_numberedLines,
  "random-lines|l"  => \$mode_randomLines,
  "random-words|w"  => \$mode_randomWords,
  "random-bytes|b"  => \$mode_randomBytes,
  #
  "separator|s=s"  => \$sep,
  "terminator|t=s"  => \$term,
  "delims|d=s"  => \$delims
) or mydiesyntax;

# -- Validate operands
scalar(@ARGV) > 0 or mydiesyntax "Too few operands specified.";

# 1st operand is always the count spec.
my $countSpec = shift;
# Break the count spec. into primary/line and optional per-line count: count[,perLineCount]
my ($primaryCountSpec, $optComma, $optPerLineCountSpec, $unexpected) = split '(,)', $countSpec;
if (length($unexpected) or not (length($primaryCountSpec) or length($optPerLineCountSpec))) { mydiesyntax "Invalid count specification: $countSpec"}

# Whether additional operands are needed / supported depends on the mode.
my ($text, $fmtText, $file);
if ($mode_numberedLines) {
  $fmtText = shift if @ARGV;
} elsif ($mode_randomLines) {
  $file = shift;
  unless ($file) { mydiesyntax "Required file operand is missing."; }
  unless (-f $file) { mydiesyntax "Not an existing or regular file: $file"; }
} elsif ($mode_randomWords) {
  $file = @ARGV ? shift : $kDICT_FILE;
  unless (-f $file) { mydiesyntax "Dictionary file not found: $file"; }
} elsif ($mode_randomBytes) {
  # no operand expected
} else {  # default mode
  $mode_staticText = 1;
  if (@ARGV) {
    $text = shift;
  } else { # read input from stdin (all at once)
    $text = do { local $/; <STDIN> };
    chomp $text;
  }
  unless ($text) { mydiesyntax "Text to repeat must not be empty."; }
}

# Ensure that a per-line count spec. is only specified for supported modes.
if ($optComma) {
  unless ($mode_staticText or $mode_randomWords) {
    mydiesyntax "A per-line count is not supported with the specified mode option.";
  }
}

# At this point there should be no more operands.
scalar(@ARGV) == 0 or mydiesyntax "Unexpected operand(s) specified: @ARGV";

# -- Validate the count spec.

# Determine if the output should be line-based.
my $lineBased = defined $optComma; # if a comma was specified, even if not followed by a per-line count, the output is line-based.

my (%primaryCountOpts, %perLineCountOpts);
# Regex that parses a count spec. into <count><scale>?<char-units-suffix>?
my $re = '^(\d+)' . '(' . join('|', keys(%kSCALE_FACTORS)) . ')?' . '(' . join('|', @kUNIT_SUFFIXES) . ')?$';
my $i = -1;
for ($primaryCountSpec, $optPerLineCountSpec) {
  ++$i;
  next unless length($_);
  my $htRef = $i == 0 ? \%primaryCountOpts : \%perLineCountOpts;
  if ($_ eq $kCOUNT_ENDLESS) {
    ${$htRef}{endless} = 1;
  } else {
    m/$re/ or mydiesyntax "Not a valid count spec.: $_";
    ${$htRef}{count} = $2 ? $kSCALE_FACTORS{$2} * $1 : $1;
    ${$htRef}{charmode} = $3 if $3;      
  }  
}
# Detect edge cases: default counts
if (not %primaryCountOpts) {
  # ,<perLineCount>  (no primary count) -> default primary count to 1
  $primaryCountOpts{count} = 1;
} elsif ($optComma and not %perLineCountOpts) {
  # <primaryCount>, (comma, but no per-line count) -> default per-line count to 1
  $perLineCountOpts{count} = 1;
}

# p \%primaryCountOpts;
# p \%perLineCountOpts;

# p uc $text;

# -- Dispatch to mode-specific helper functions

if ($mode_numberedLines) {

  genNumberedLines($primaryCountSpec, $fmtText);

} elsif ($mode_randomLines) {
} elsif ($mode_randomWords) {
} elsif ($mode_randomBytes) {

  genRandomBytes($primaryCountOpts{endless} ? -1 : $primaryCountOpts{count});

} elsif ($mode_staticText) {

  repeat($countSpec, $text, ( sep => $sep, term => $term, delims => $delims ));

} else { # Should never get here.
  die "DESIGN ERROR: Unanticipated mode."
}

exit;
# --------------------------

# SYNOPSIS
#     repeat(countSpec, text[, options])
sub repeat {
  
  my ($countSpec, $text, %opts) = @_;
  my $nl = $^O eq 'MSWin32' ? "\r\n" : "\n";
  my $nlLen = $^O eq 'MSWin32' ? 2 : 1;

  die "Invalid arguments." unless length($countSpec) > 0 and length($text) > 0;
  
  # Determine I/O layers:
  # Unix-like platforms:
  #   Use :unix rather than the default :perlio for performance reasons: :unix is lower-level and unbuffered
  #   (:perlio actually builds on it).
  #   Additionally, we activate :utf8 only if the input string contains non-ASCII characters, because the
  #   :utf8 pseudo-layer also slows processing.
  #   !! Note that UTF-8 is HARD-CODED as an assumption; fortunately, all locales on modern Unix-like platforms are UTF-8-based.
  # Windows:
  #   NO performance optimization: We need the default :crlf for proper CRLF translation, which means
  #   we're stuck with :perlio.
  #   We make NO attempt to support anything other than the default encoding: bytes are passed through,
  #   characters are assumed to be single-byte; but see the global exception for outputting to the terminal (console window) at the top.
  binmode STDOUT, (Encode::is_utf8($text) ? ':unix :utf8' : ':unix') unless $^O eq 'MSWin32';

  # printf STDERR join (', ', PerlIO::get_layers(STDOUT)) . "\n"; 
  # p $countSpec, $text, \%opts; # 

  # -- Parse the count spec.
  my (%primaryCountOpts, %perLineCountOpts);
  # Regex that parses a count spec:
  #  $1 == mere number, $2 (optional) == scale factor such as 'k', $3 (optional) is count-is-characters-mode indicator 'c' or 'f'
  my $re = '^(\d+)' . '(' . join('|', keys(%kSCALE_FACTORS)) . ')?' . '(' . join('|', @kUNIT_SUFFIXES) . ')?$';
  my $lineBased = $countSpec =~ /,/; # The presence of a ',' implies the desire to output line by line.
  my @subCountSpecs = split ',', $countSpec;
  die "Invalid count spec.: $countSpec" if scalar(@subCountSpecs) > 2;
  my $i = -1;
  for (@subCountSpecs) {
    my $htRef = ++$i == 0 ? \%primaryCountOpts : \%perLineCountOpts;
    if (length($_) == 0) { # an empty sub-count spec. implies a count of 1
      ${$htRef}{count} = 1;
    } elsif ($_ eq $kCOUNT_ENDLESS) {
      ${$htRef}{endless} = 1;
    } else {
      m/$re/ or die "Not a valid count spec.: $_";
      ${$htRef}{count} = $2 ? $kSCALE_FACTORS{$2} * $1 : $1;
      ${$htRef}{charmode} = $3 if $3;      
    }  
  }
  # Translate into line and per-line spec.
  if (! %perLineCountOpts) {
    if ($lineBased) {
      $perLineCountOpts{count} = 1;
    } else {
      %perLineCountOpts = %primaryCountOpts;
      $primaryCountOpts{count} = 1;
    }
  }

  # p \%primaryCountOpts, \%perLineCountOpts, $lineBased;

  # -- Synthesize the repeat unit.
  my $sep = $opts{sep};
  my $rptUnit = $text;
  if ($opts{delims}) {
    my ($delimOpen, $delimClose);
    $delimOpen = $delimClose = $opts{delims}; 
    if (length($delimOpen) > 1 ) {
      $delimOpen = substr $delimOpen, 0, length($delimOpen) / 2;
      $delimClose = substr $delimClose, length($delimOpen);
    }
    $rptUnit = sprintf '%s%s%s', $delimOpen, $text, $delimClose;
  }
  $rptUnit .= $opts{term} if $opts{term};

  # -- Start repeating

  my $lineCount = $primaryCountOpts{count};
  my $perLineCount = $perLineCountOpts{count};
  my $endless = $primaryCountOpts{endless};
  my $endlessLine = $perLineCountOpts{endless};
  my $iLine = 0;
  while ($endless or ++$iLine <= $lineCount) {
    if ($endlessLine) {
      $rptUnit .= $sep if (defined $sep);
      while (1) { print $rptUnit; }
    } else {
      my $line;
      if (! defined $line) {
        # !! Building up the entire a line in memory can be problematic.
        if ($sep and $perLineCount > 1) {
          $line = (($rptUnit . $sep) x ($perLineCount-1)) . $rptUnit;
        } else {
          $line = $rptUnit x $perLineCount;
        }
      }
      print $line;
    }

    print "\n" if $lineBased;

  }

  # When outputting to a terminal, add a trailing newline to output that
  # doesn't already end in one, for readability.
  unless ($lineBased) {
    print "\n" if -t 1;
  }

  # p "unit: ", $rptUnit;

  # if ($lineBased;

  # while ()

}

# SYNOPSIS
#   genRandomBytes <count>
# DESCRIPTION
#   Outputs the specified number of random bytes to stdout.
#   <count> must be a count >= 0 or -1 to signal endless output.
# PREREQUISITES
#   Requires special character device /dev/urandom (Unix-like platforms only)
#   and either BSD or GNU `head`.
sub genRandomBytes {

  my $count = shift;
  my $randSource = '/dev/urandom'; # endless source of pseudo-random bytes

  return if $count == 0;

  -c $randSource or die "Cannot generate random bytes, because your system lacks special file '$randSource'.";

  binmode STDOUT;  # make sure that raw bytes are output

  if ($count == -1) {  # signals endless output
    system "cat $randSource" and die "$!";
  } else {
    # Note: head -c is NON-POSIX and requires either BSD or GNU utilities
    system "head -c $count $randSource" and die "$!";
  }

  return;
}

# SYNOPSIS
#   genNumberedLines count[scale-factor][c|f], [fmt]
# DESCRIPTION
#   Generates <count> numbered lines or, if <count> is suffixed with 'c' or 'f',
#   as many numbered lines as needed until the desired character count is
#   reached:
#   'c' produces *at most* <count> characters, without truncating the last
#   output line.
#   'f' produces *exactly* <count> characters (fixed count, truncating the
#   last output line as needed.
#   <scale-factor> may be one of k, m, g (decimal) or ki, mi, gi.
#
#   Alternatively, the count operand may be 'x', in which case endless output
#   is produced.
#
#   Note that a character count doesn't necessarily equal the same byte count,
#   if the active locale uses UTF-8 character encoding, as is typical nowadays.
# 
#   <fmt> is a printf format string that defaults to 'line %.0f'.
#   
# EXAMPLE
#   genNumberedLines(10)  # -> "line 1\nline 2\n...""
#   genNumberedLines(1000c, 'line %03d') # -> "line 001\n..." up to a *max.* of 1000 chars.
#   genNumberedLines(1000f) # -> "line 1\nline 2\n..." with *exactly* 1000 chars.
sub genNumberedLines {

  my ($countSpec, $fmt) = @_;
  
  # Determine I/O layers:
  # Unix-like platforms:
  #   Use :unix rather than the default :perlio for performance reasons: :unix is lower-level and unbuffered
  #   (:perlio actually builds on it).
  #   Additionally, we activate :utf8 only if the input string contains non-ASCII characters, because the
  #   :utf8 pseudo-layer also slows processing.
  #   !! Note that UTF-8 is HARD-CODED as an assumption; fortunately, all locales on modern Unix-like platforms are UTF-8-based.
  # Windows:
  #   NO performance optimization: We need the default :crlf for proper CRLF translation, which means
  #   we're stuck with :perlio.
  #   We make NO attempt to support anything other than the default encoding: bytes are passed through,
  #   characters are assumed to be single-byte; but see the global exception for outputting to the terminal (console window) at the top.
  binmode STDOUT, (Encode::is_utf8($text) ? ':unix :utf8' : ':unix') unless $^O eq 'MSWin32';

  $fmt = 'line %.0f' unless length($fmt);
  chomp $fmt; $fmt .= "\n";

  my $endless; my $count;
  my $exact = 0; my $maxChars = 0; my $charsSoFar = 0;
  if ($countSpec eq 'x') {
    $endless = 1;
  } else {    
    my %kSCALE_FACTORS = ( 
      # decimal
      k => 10**3,
      m => 10**6,
      g => 10**9,
      # binary
      ki => 2**10,
      mi => 2**20,
      gi => 2**30  
    );
    # Regex: $1 == mere number, $2 (optional) == scale factor such as 'k', $3 (optional) is
    #        count-is-characters-mode indicator 'c' or 'f'
    my $re = '^(\d+)' . '(' . join('|', keys(%kSCALE_FACTORS))  . ')?' . '(c|f)?$';
    $countSpec =~ /$re/ or die "Invalid count spec.: $count";
    $count = $1;
    if ($2) {
      $count *= $kSCALE_FACTORS{$2};
    }
    if ($3) {
      $maxChars = $count;
      $exact = $3 eq 'f';
    }
    return undef if $count == 0;
  }

  my $i = 0; my ($line, $chars);
  while (++$i) {
    $line = sprintf $fmt, $i; $chars=length($line);
    if ($maxChars && $charsSoFar + $chars >= $maxChars) {
      if ($exact) {
        $line = substr($line, 0, $maxChars - $charsSoFar);
        $i = $count; # exit after this iteration
      } else {
        last;
      }
    }
    print $line;
    $charsSoFar += $chars;
    if (! $endless) {
      last if $i == $count;
    }
  }

  return undef;
}



####
# MAN PAGE MARKDOWN SOURCE
#  - Place a Markdown-formatted version of the man page for this script
#    below the `DATA` line below.
#  - Do not alter the `DATA` line in any way.
#  - The entire rest of this script
#    is assumed to be the Markdown document.
#  - The document must be formatted to look good in all 3 viewing scenarios:
#     - as a man page, after conversion to ROFF with marked-man
#     - as plain text (raw Markdown source)
#     - as HTML (rendered Markdown)
#  Markdown formatting guidelines:
#   - GENERAL
#     To support plain-text rendering in the terminal, limit all lines to 80 chars.,
#     and, for similar rendering as HTML, *end every line with 2 trailing spaces*.
#   - HEADINGS
#     - For better plain-text rendering, leave an empty line after a heading
#       marked-man will remove it from the ROFF version.
#     - The first heading must be a level-1 heading containing the utility
#       name and very brief description; append the manual-section number 
#       directly to the CLI name; e.g.:
#         # foo(1) - does bar
#     - The 2nd, level-2 heading must be '## SYNOPSIS' and the chapter's body
#       must render reasonably as plain text, because it is printed to stdout
#       when  `-h`, `--help` is specified:
#         Use 4-space indentation without markup for both the syntax line and the
#         block of brief option descriptions; represent option-arguments and operands
#         in angle brackets; e.g., '<foo>'
#     - All other headings should be level-2 headings in ALL-CAPS.
#   - TEXT
#      - Use NO indentation for regular chapter text; if you do, it will 
#        be indented further than list items.
#      - Use 4-space indentation, as usual, for code blocks.
#      - Markup character-styling markup translates to ROFF rendering as follows:
#         `...` and **...** render as bolded (red) text
#         _..._ and *...* render as word-individually underlined text
#   - LISTS
#      - Indent list items by 2 spaces for better plain-text viewing, but note
#        that the ROFF generated by marked-man still renders them unindented.
#      - End every list item (bullet point) itself with 2 trailing spaces too so
#        that it renders on its own line.
#      - Avoid associating more than 1 paragraph with a list item, if possible,
#        because it requires the following trick, which hampers plain-text readability:
#        Use '&nbsp;<space><space>' in lieu of an empty line.
####
__DATA__
# rpt(1) - repeat text, numbered lines, random lines or bytes

## SYNOPSIS

Repeat STATIC TEXT:

    rpt [<fmtOpts>] <count>[c|f][,[<perLineCount>[c|f]]] [<text>]

    <fmtOpts> control per-line formatting:

    -s <sep>     separator to place between units
    -t <term>    terminator to place after every unit
    -d <delims>  delimiters around each unit

Generate NUMBERED LINES:

    rpt -n        <count>[c|f] [<fmtText>]

Output RANDOM LINES from a file:

    rpt -l        <count>[c|f] <file>

Generate RANDOM WORDS:

    rpt -w        <count>[c|f][,[<perLineCount>[c|f]]] [<dictFile>]

Generate RANDOM BYTES:

    rpt -b        <count>

Shared count specifications:

    Counts may be scaled with multipliers (e.g., `2m`):
    Decimal:
      k     m       g      
      1000  10^6    10^9
    Binary:
      ki    mi      gi
      1024  1048576 1073741824

    'x' in lieu of a number outputs endlessly.

    By default, counts specify how often to repeat the input or, for
    line-based output, the number of output lines;
    a terminal 'c' or 'f' switches to character count:
      'c'    at most as many chars. as specified, no truncation
      'f'    exactly as many chars. as specified, may truncate

## DESCRIPTION

## OPTIONS

  * `-q`, `--quiet`  
   quiet mode

## STANDARD OPTIONS

All standard options provide information only.

 * `-h, --help`  
   Prints the contents of the synopsis chapter to stdout for quick reference.

 * `--man`  
   Displays this manual page, which is a helpful alternative to using `man`,  
   if the manual page isn't installed.

 * `--version`  
   Prints version information.
  
 * `--home`  
   Opens this utility's home page in the system's default web browser.

## COMPATIBILITY

Requires Perl v??? or higher.

## LICENSE

For license information, bug reports, and more, visit the home page by running  
`rpt --home`
